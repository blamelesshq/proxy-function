provider "azurerm" {
    // Credentials should be set, az login is the easiest
    // other options are described here: https://www.terraform.io/docs/providers/azurerm/index.html
    version = "=2.47.0"
    features {}
}

# resource "azurerm_resource_group" "rg" {
#   name     = "rg-29092021"
#   location = var.location
# }

# We use variables for repeat settings
# A name to make sure resources don't clash, we use them in naming  our
# components, as some things (like functions) need a globally unique name

resource "azurerm_api_management" "example" {
  name                = var.apiManagementName
  resource_group_name = var.resourceGroupName
  location            = var.location
  publisher_name      = var.publisherName
  publisher_email     = var.adminemail
  
  sku_name            = var.skuName
}

# Our general API definition, here we could include a nice swagger file or something
resource "azurerm_api_management_api" "example" {
  name                = "340920211func"
  resource_group_name = var.resourceGroupName
  api_management_name = var.apiManagementName
  revision            = "2"
  display_name        = var.apiManagementName
  path                = ""
  protocols           = ["https"]

  import {
    content_format = "openapi"
    content_value  = file("api-spec.yml")
  }
}

# A seperate backend definition, we need this to set our authorisation code for our azure function
resource "azurerm_api_management_backend" "example" {
  name                = var.apiManagementName
  resource_group_name = var.resourceGroupName
  api_management_name = var.apiManagementName
  protocol            = "http"
  url                 = "https://${var.azureFunctionHostname}/api/"

  # This depends on the existence of the named value, however terraform doesn't know this
  # so we have to define it explicitly
  # depends_on          = [azurerm_api_management_named_value.example]

#   credentials {
#       header = {
#           x-functions-key = "{{func-functionkey}}"
#       }
#   }
}

# To store our function code securely (so it isn't easily visible everywhere)
# we store the value as a secret 'named value'
# resource "azurerm_api_management_named_value" "example" {
#   name                = "func-functionkey"
#   resource_group_name = azurerm_resource_group.rg.name
#   api_management_name = azurerm_api_management.example.name
#   display_name        = "func-functionkey"
#   value               = "Sample"#data.azurerm_function_app_host_keys.app_function_key.master_key
#   secret              = true
# }


# We use a policy on our API to set the backend, which has the configuration for the authentication code
# resource "azurerm_api_management_api_policy" "example" {
#   api_name            = var.apiManagementName
#   api_management_name = var.apiManagementName
#   resource_group_name = var.resourceGroupName

#   # Put any policy block here, has to beh XML :(
#   # More options: https://docs.microsoft.com/en-us/azure/api-management/api-management-policies
#   xml_content = <<XML
#     <policies>
#         <inbound>
#             <base />
#             <set-backend-service backend-id="${azurerm_api_management_backend.example.name}" />
#         </inbound>
#     </policies>
#   XML
# }

# We use the host key in the APIM to authenticate requests
# data "azurerm_function_app_host_keys" "app_function_key" {
#   name                = var.azureFunctionName
#   resource_group_name = var.resourceGroupName
# }